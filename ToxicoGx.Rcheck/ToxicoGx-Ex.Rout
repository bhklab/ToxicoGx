
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ToxicoGx"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "ToxicoGx-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('ToxicoGx')
Loading required package: CoreGx
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ToxicoSet-class")
> ### * ToxicoSet-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ToxicoSet-class
> ### Title: Class to contain Toxicogenomic Data
> ### Aliases: ToxicoSet-class .ToxicoSet cellInfo,ToxicoSet-method
> ###   cellInfo<-,ToxicoSet,data.frame-method drugInfo,ToxicoSet-method
> ###   drugInfo<-,ToxicoSet,data.frame-method
> ###   phenoInfo,ToxicoSet,character-method
> ###   phenoInfo<-,ToxicoSet,character,data.frame-method
> ###   molecularProfiles,ToxicoSet,character-method
> ###   molecularProfiles<-,ToxicoSet,character,matrix-method
> ###   featureInfo,ToxicoSet,character-method
> ###   featureInfo<-,ToxicoSet,character,data.frame-method
> ###   sensitivityInfo,ToxicoSet-method
> ###   sensitivityInfo<-,ToxicoSet,data.frame-method
> ###   sensitivityProfiles,ToxicoSet-method
> ###   sensitivityProfiles<-,ToxicoSet,data.frame-method
> ###   sensitivityProfiles<-,ToxicoSet,matrix-method
> ###   sensitivityMeasures,ToxicoSet-method drugNames,ToxicoSet-method
> ###   drugNames<-,ToxicoSet,character-method cellNames,ToxicoSet-method
> ###   cellNames<-,ToxicoSet,character-method
> ###   fNames,ToxicoSet,character-method dateCreated,ToxicoSet-method
> ###   cSetName,ToxicoSet-method pertNumber,ToxicoSet-method
> ###   sensNumber,ToxicoSet-method pertNumber<-,ToxicoSet,array-method
> ###   sensNumber<-,ToxicoSet,matrix-method
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> cellInfo <- cellInfo(TGGATESsmall)
> 
> data(TGGATESsmall)
> cellInfo(TGGATESsmall) <- cellInfo(TGGATESsmall)
> 
> data(TGGATESsmall)
> phenoInfo <- phenoInfo(TGGATESsmall, mDataType="rna")
> 
> data(TGGATESsmall)
> phenoInfo(TGGATESsmall, mDataType="rna") <- phenoInfo(TGGATESsmall, mDataType="rna")
> 
> data(TGGATESsmall)
> TGGATES_mProf <- molecularProfiles(TGGATESsmall, "rna")[1:10,]
> 
> molecularProfiles(TGGATESsmall, "rna") <- molecularProfiles(TGGATESsmall, "rna")
> 
> data(TGGATESsmall)
> featureInfo <- featureInfo(TGGATESsmall, "rna")[1:10,]
> 
> data(TGGATESsmall)
> featureInfo(TGGATESsmall, "rna") <- featureInfo(TGGATESsmall, "rna")
> 
> sensInf<- sensitivityInfo(TGGATESsmall)[1:10,]
> 
> data(TGGATESsmall)
> sensitivityInfo(TGGATESsmall) <- sensitivityInfo(TGGATESsmall)
> 
> data(TGGATESsmall)
> sensProf <- sensitivityProfiles(TGGATESsmall)
> 
> sensitivityProfiles(TGGATESsmall) <- sensitivityProfiles(TGGATESsmall)
> 
> sensitivityMeasures(TGGATESsmall)
[1] "slope_recomputed" "auc_recomputed"  
> 
> cellNames(TGGATESsmall)
[1] "Hepatocyte"
> 
> data(TGGATESsmall)
> cellNames(TGGATESsmall) <- cellNames(TGGATESsmall)
> 
> fNames(TGGATESsmall, "rna")[1:10]
 [1] "ENSG00000000003_at" "ENSG00000000005_at" "ENSG00000000419_at"
 [4] "ENSG00000000457_at" "ENSG00000000460_at" "ENSG00000000938_at"
 [7] "ENSG00000000971_at" "ENSG00000001036_at" "ENSG00000001084_at"
[10] "ENSG00000001167_at"
> 
> dateCreated(TGGATESsmall)
[1] "Wed Sep 25 15:28:35 2019"
> 
> tSetName <- cSetName
> tSetName(TGGATESsmall)
[1] "TGGATES Human LDH"
> 
> pertNumber(TGGATESsmall)
, , rna

           naphthyl isothiocyanate phenylbutazone rifampicin indometacin
Hepatocyte                      24             24         24          24
           chlorpromazine isoniazid acetaminophen clofibrate
Hepatocyte             24        24            24         24
           carbon tetrachloride phenobarbital methapyrilene ethionine
Hepatocyte                   24            24            24        24
           carbamazepine cimetidine fluphenazine pirinixic acid aspirin
Hepatocyte            24         24           24             24      24
           gemfibrozil labetalol hexachlorobenzene amiodarone Allopurinol
Hepatocyte          24        24                24         24          24
           benzbromarone nitrofurantoin diazepam griseofulvin sulfasalazine
Hepatocyte            24             24       24           24            24
           bromobenzene Cyclophosphamide omeprazole allyl alcohol Valproic.acid
Hepatocyte           24               24         24            24            24
           diclofenac propylthiouracil 2H-1-Benzopyran-2-one haloperidol
Hepatocyte         24               24                    24          24
           tetracycline flutamide glibenclamide azathioprine perhexiline
Hepatocyte           24        24            24           24          24
           phenytoin adapin thioridazine methyltestosterone lomustine
Hepatocyte        24     24           24                 24        24
           thioacetamide ketoconazole ciprofloxacin pemoline chlormezanone
Hepatocyte            24           24            12       12            12
           metformin Tamoxifen ethinylestradiol methyldopa thiamazole
Hepatocyte        12        12               12         12         12
           monocrotaline vitamin A quinidine tacrine moxisylyte iproniazid
Hepatocyte            12        12        12      12         12         12
           chloramphenicol nitrofural imipramine amitriptyline hydroxyzine
Hepatocyte              12         12         12            12          12
           2-(4-Isobutylphenyl)propanoic acid naproxen furosemide fenofibrate
Hepatocyte                                 12       12         12          12
           chlorpropamide nicotinic acid erythromycin ethylsuccinate ethambutol
Hepatocyte             12             12                          12         12
           mefenamic acid famotidine ranitidine tannic acid captopril caffeine
Hepatocyte             12         12         12          12        12       12
           papaverine enalapril theophylline sulindac penicillamine
Hepatocyte         12        12           12       12            12
           disopyramide mexiletine acetazolamide Disulfiram colchicine
Hepatocyte           12         12            12         12         12
           nifedipine diltiazem chlorphenamine tolbutamide acarbose Simvastatin
Hepatocyte         12        12             12          12       12          12
           meloxicam chlormadinone benziodarone ethionamide nimesulide ethanol
Hepatocyte        12            12           12          12         12      12
           bucetin acetamidofluorene ticlopidine tiopronin promethazine
Hepatocyte      12                12          12        12           12
           sulpiride dantrolene clomipramine terbinafine lornoxicam danazol
Hepatocyte        12         12           12          12         12      12
           etoposide N-phenylanthranilic acid ajmaline phenacetin
Hepatocyte        12                       12       12         12
           nitrosodiethylamine alpidem venlafaxine clozapine buspirone
Hepatocyte                  12       6           6         6         6
           nefazodone triazolam trimethadione bromoethylamine Doxorubicin
Hepatocyte          6        16            15              15          16
           ciclosporin cicloheximide phorone bendazac buthionine sulfoximine
Hepatocyte          16            16      14       16                     16
           galactosamine diethyl maleate Rotenone methylene dianiline
Hepatocyte            16              16       16                  16
           butylated hydroxyanisole amphotericin B 2,4-dinitrophenol
Hepatocyte                       16             16                16
           fluoxetine hydrochloride dexamethasone 2-nitrofluorene
Hepatocyte                       16            16              16
           N-methyl-N-nitrosourea acetamide N-nitrosomorpholine
Hepatocyte                     16        16                  16

> 
> sensNumber(TGGATESsmall)
           isoniazid carbon tetrachloride omeprazole diclofenac azathioprine
Hepatocyte         6                    6          6          6            6
           ciclosporin
Hepatocyte           4
> 
> pertNumber(TGGATESsmall) <- pertNumber(TGGATESsmall)
> 
> sensNumber(TGGATESsmall) <- sensNumber(TGGATESsmall)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ToxicoSet-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("checkTSetStructure")
> ### * checkTSetStructure
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: checkTSetStructure
> ### Title: A function to verify the structure of a ToxicoSet
> ### Aliases: checkTSetStructure
> 
> ### ** Examples
> 
> 
> checkTSetStructure(TGGATESsmall)
Warning in checkTSetStructure(TGGATESsmall) :
  rna: fData dimension is OK
Warning in checkTSetStructure(TGGATESsmall) :
  rna: pData dimension is OK
Warning in checkTSetStructure(TGGATESsmall) : 
Warning in checkTSetStructure(TGGATESsmall) : 
Warning in checkTSetStructure(TGGATESsmall) : BEST is OK
Warning in checkTSetStructure(TGGATESsmall) : Symbol is OK
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("checkTSetStructure", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("computeAUC")
> ### * computeAUC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: computeAUC
> ### Title: Computes the AUC for a Drug Dose Viability Curve
> ### Aliases: computeAUC
> 
> ### ** Examples
> 
> dose <- c("0.0025","0.008","0.025","0.08","0.25","0.8","2.53","8")
> viability <- c("108.67","111","102.16","100.27","90","87","74","57")
> computeAUC(dose, viability)
Warning in sanitizeInput(conc = conc, viability = viability, conc_as_log = conc_as_log,  :
  Warning: Viability data exceeds negative control.
[1] 9.35341
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("computeAUC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("computeICn")
> ### * computeICn
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: computeIC50
> ### Title: Computes the ICn for any n in 0-100 for a Drug Dose Viability
> ###   Curve
> ### Aliases: computeIC50 computeICn
> 
> ### ** Examples
> 
> dose <- c("0.0025","0.008","0.025","0.08","0.25","0.8","2.53","8")
> viability <- c("108.67","111","102.16","100.27","90","87","74","57")
> computeIC50(dose, viability)
Warning in sanitizeInput(conc = conc, viability = viability, conc_as_log = conc_as_log,  :
  Warning: Viability data exceeds negative control.
[1] 25.61552
> computeICn(dose, viability, n=10)
Warning in sanitizeInput(conc = conc, viability = viability, conc_as_log = conc_as_log,  :
  Warning: Viability data exceeds negative control.
[1] 0.6438646
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("computeICn", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dim-ToxicoSet-method")
> ### * dim-ToxicoSet-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dim,ToxicoSet-method
> ### Title: Get the dimensions of a ToxicoSet
> ### Aliases: dim,ToxicoSet-method
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> dim(TGGATESsmall)
Cells Drugs 
    1     6 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dim-ToxicoSet-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("drugDoseResponseCurve")
> ### * drugDoseResponseCurve
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: drugDoseResponseCurve
> ### Title: Plot drug response curve of a given drug and a given cell for a
> ###   list of tSets (objects of the ToxicoSet class).
> ### Aliases: drugDoseResponseCurve
> 
> ### ** Examples
> 
> if (interactive()) {
+ drugDoseResponseCurve(concentrations=list("Experiment 1"=c(.008, .04, .2, 1)),
+  viabilities=list(c(100,50,30,1)), plot.type="Both")
+ }
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("drugDoseResponseCurve", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("drugGeneResponseCurve")
> ### * drugGeneResponseCurve
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: drugGeneResponseCurve
> ### Title: Compares gene expression for a specificed set of features over
> ###   specific drug dosages vs time
> ### Aliases: drugGeneResponseCurve
> 
> ### ** Examples
> 
> 
> if (interactive()) {
+ drugGeneResponseCurve(TGGATESsmall, dose = c("Control", "Low", "Middle"),
+   mDataTypes="rna", drug = "naphthyl isothiocyanate",
+   duration = c("2", "8", "24"), features = "ENSG00000000003_at")
+ }
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("drugGeneResponseCurve", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("drugInfo-set")
> ### * drugInfo-set
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: drugInfo<-
> ### Title: drugInfo<- Generic
> ### Aliases: drugInfo<-
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> drugInfo(TGGATESsmall) <- drugInfo(TGGATESsmall)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("drugInfo-set", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("drugInfo")
> ### * drugInfo
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: drugInfo
> ### Title: drugInfo Generic
> ### Aliases: drugInfo
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> drugInfo <- drugInfo(TGGATESsmall)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("drugInfo", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("drugNames-set")
> ### * drugNames-set
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: drugNames<-
> ### Title: drugNames<- Generic
> ### Aliases: drugNames<-
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> drugNames(TGGATESsmall) <- drugNames(TGGATESsmall)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("drugNames-set", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("drugNames")
> ### * drugNames
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: drugNames
> ### Title: drugNames Generic
> ### Aliases: drugNames
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> drugName <- drugNames(TGGATESsmall)[1:10]
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("drugNames", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("drugPerturbationSig")
> ### * drugPerturbationSig
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: drugPerturbationSig
> ### Title: Creates a signature representing gene expression (or other
> ###   molecular profile) change induced by administrating a drug, for use
> ###   in drug effect analysis.
> ### Aliases: drugPerturbationSig
> 
> ### ** Examples
> 
> #data(TGGATES_small)
> #drug.perturbation <- drugPerturbationSig(TGGATES_small, mDataType="rna", nthread=1)
> #print(drug.perturbation)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("drugPerturbationSig", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("drugResponseCurve")
> ### * drugResponseCurve
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: drugResponseCurve
> ### Title: Plot drug response curve of a given drug and a given cell for a
> ###   list of tSets (objects of the ToxicoSet class).
> ### Aliases: drugResponseCurve
> 
> ### ** Examples
> 
> if (interactive()) {
+ drugResponseCurve(concentrations=list("Experiment 1"=c(.008, .04, .2, 1)),
+  viabilities=list(c(100,50,30,1)), plot.type="Both")
+ }
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("drugResponseCurve", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("drugTimeResponseCurve")
> ### * drugTimeResponseCurve
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: drugTimeResponseCurve
> ### Title: Compares viabilities at a given dose over different experimental
> ###   duration
> ### Aliases: drugTimeResponseCurve
> 
> ### ** Examples
> 
> if (interactive()) {
+   ToxicoGx::drugTimeResponseCurve(TGGATESsmall, cellline = "Hepatocyte",
+     dose = c("Control", "Low", "Middle"),
+     drug = "naphthyl isothiocyanate", duration = c("2", "8", "24"))
+ }
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("drugTimeResponseCurve", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("logLogisticRegression")
> ### * logLogisticRegression
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: logLogisticRegression
> ### Title: Fits curves of the form E = E_inf + (1 - E_inf)/(1 +
> ###   (c/EC50)^HS) to dose-response data points (c, E) given by the user
> ###   and returns a vector containing estimates for HS, E_inf, and EC50.
> ### Aliases: logLogisticRegression
> 
> ### ** Examples
> 
> dose <- c("0.0025","0.008","0.025","0.08","0.25","0.8","2.53","8")
> viability <- c("108.67","111","102.16","100.27","90","87","74","57")
> computeAUC(dose, viability)
Warning in sanitizeInput(conc = conc, viability = viability, conc_as_log = conc_as_log,  :
  Warning: Viability data exceeds negative control.
[1] 9.35341
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("logLogisticRegression", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mDataNames-ToxicoSet-method")
> ### * mDataNames-ToxicoSet-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mDataNames,ToxicoSet-method
> ### Title: mDataNames
> ### Aliases: mDataNames,ToxicoSet-method
> 
> ### ** Examples
> 
> mDataNames(TGGATESsmall)
[1] "rna"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mDataNames-ToxicoSet-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("names-ToxicoSet-method")
> ### * names-ToxicoSet-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: names,ToxicoSet-method
> ### Title: tSet Name
> ### Aliases: names,ToxicoSet-method
> 
> ### ** Examples
> 
> names(TGGATESsmall)
[1] "TGGATES Human LDH"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("names-ToxicoSet-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("show-ToxicoSet-method")
> ### * show-ToxicoSet-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: show,ToxicoSet-method
> ### Title: Show a ToxicoSet
> ### Aliases: show,ToxicoSet-method
> 
> ### ** Examples
> 
> TGGATESsmall
Name:  TGGATES Human LDH 
Date Created:  Wed Sep 25 15:28:35 2019 
Number of cell lines:  1 
Number of drugs:  6 
RNA: 
	Dim:  20056 136 
Drug pertubation: 
	Please look at pertNumber(tSet) to determine number of experiments for each drug-cell combination.
Drug sensitivity: 
	Number of Experiments:  34 
	Please look at sensNumber(tSet) to determine number of experiments for each drug-cell combination.
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("show-ToxicoSet-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("show-ToxicoSig-method")
> ### * show-ToxicoSig-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: show,ToxicoSig-method
> ### Title: Show ToxicoGx Signatures
> ### Aliases: show,ToxicoSig-method
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> drug.perturbation <- drugPerturbationSig(TGGATESsmall, mDataType="rna", nthread=1, duration = "2",
+      drugs = head(drugNames(TGGATESsmall)), features = fNames(TGGATESsmall, "rna")[seq_len(2)])
Warning in FUN(X[[i]], ...) :
  There are only controls available at dose levels Control Low Middle High for ciclosporin, summary statistics for this drug will be excluded for the results.\nAdding another dose level will likely generate results.
> drug.perturbation
ToxicoSet Name:  
Signature Type:  Perturbation 
Date Created:  Tue Oct 15 15:51:15 2019 
Number of Drugs:  5 
Number of Genes/Probes:  2 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("show-ToxicoSig-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("showSigAnnot")
> ### * showSigAnnot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: showSigAnnot
> ### Title: Show the Annotations of a signature object
> ### Aliases: showSigAnnot
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> drug.perturbation <- drugPerturbationSig(TGGATESsmall, mDataType="rna", nthread=1, duration = "2",
+      drugs = head(drugNames(TGGATESsmall)), features = fNames(TGGATESsmall, "rna")[seq_len(2)])
Warning in FUN(X[[i]], ...) :
  There are only controls available at dose levels Control Low Middle High for ciclosporin, summary statistics for this drug will be excluded for the results.\nAdding another dose level will likely generate results.
> showSigAnnot(drug.perturbation)
[1] "drugPerturbationSig"                      
[2] "TGGATESsmall"                             
[3] "rna"                                      
[4] "head(drugNames(TGGATESsmall))"            
[5] "fNames(TGGATESsmall, \"rna\")[seq_len(2)]"
[6] "2"                                        
[7] "1"                                        
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=C              
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] ToxicoGx_0.0.1 CoreGx_0.1.0  

loaded via a namespace (and not attached):
 [1] lsa_0.73.1                  bitops_1.0-6               
 [3] matrixStats_0.55.0          RColorBrewer_1.1-2         
 [5] GenomeInfoDb_1.20.0         SnowballC_0.6.0            
 [7] tools_3.6.1                 R6_2.4.0                   
 [9] DT_0.9                      KernSmooth_2.23-15         
[11] sm_2.2-5.6                  lazyeval_0.2.2             
[13] BiocGenerics_0.30.0         colorspace_1.4-1           
[15] tidyselect_0.2.5            gridExtra_2.3              
[17] compiler_3.6.1              Biobase_2.44.0             
[19] shinyjs_1.0                 DelayedArray_0.10.0        
[21] slam_0.1-45                 caTools_1.17.1.2           
[23] scales_1.0.0                relations_0.6-8            
[25] stringr_1.4.0               digest_0.6.21              
[27] XVector_0.24.0              pkgconfig_2.0.3            
[29] htmltools_0.3.6             plotrix_3.7-6              
[31] limma_3.40.6                maps_3.3.0                 
[33] htmlwidgets_1.3             rlang_0.4.0                
[35] rstudioapi_0.10             shiny_1.3.2                
[37] visNetwork_2.0.8            jsonlite_1.6               
[39] BiocParallel_1.18.1         gtools_3.8.1               
[41] dplyr_0.8.3                 RCurl_1.95-4.12            
[43] magrittr_1.5                GenomeInfoDbData_1.2.1     
[45] Matrix_1.2-17               Rcpp_1.0.2                 
[47] celestial_1.4.6             munsell_0.5.0              
[49] S4Vectors_0.22.1            piano_2.0.2                
[51] stringi_1.4.3               MASS_7.3-51.4              
[53] SummarizedExperiment_1.14.1 zlibbioc_1.30.0            
[55] gplots_3.0.1.1              plyr_1.8.4                 
[57] grid_3.6.1                  parallel_3.6.1             
[59] gdata_2.18.0                promises_1.0.1             
[61] shinydashboard_0.7.1        crayon_1.3.4               
[63] lattice_0.20-38             mapproj_1.2.6              
[65] pillar_1.4.2                fgsea_1.10.1               
[67] tcltk_3.6.1                 igraph_1.2.4.1             
[69] GenomicRanges_1.36.1        reshape2_1.4.3             
[71] marray_1.62.0               stats4_3.6.1               
[73] fastmatch_1.1-0             NISTunits_1.0.1            
[75] glue_1.3.1                  data.table_1.12.4          
[77] httpuv_1.5.2                gtable_0.3.0               
[79] RANN_2.6.1                  purrr_0.3.2                
[81] assertthat_0.2.1            ggplot2_3.2.1              
[83] mime_0.7                    xtable_1.8-4               
[85] pracma_2.2.5                later_1.0.0                
[87] tibble_2.1.3                IRanges_2.18.3             
[89] sets_1.0-18                 cluster_2.1.0              
[91] magicaxis_2.0.10           
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("showSigAnnot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sub-ToxicoSet-ANY-ANY-ANY-method")
> ### * sub-ToxicoSet-ANY-ANY-ANY-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: [,ToxicoSet,ANY,ANY,ANY-method
> ### Title: '['
> ### Aliases: [,ToxicoSet,ANY,ANY,ANY-method
> 
> ### ** Examples
> 
> tSet <- TGGATESsmall[cellNames(TGGATESsmall), drugNames(TGGATESsmall)[1:3]]
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sub-ToxicoSet-ANY-ANY-ANY-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("subsetTo")
> ### * subsetTo
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: subsetTo
> ### Title: A function to subset a ToxicoSet to data containing only
> ###   specified drugs, cells and genes
> ### Aliases: subsetTo
> 
> ### ** Examples
> 
> TGGATESDrugNames  <- drugNames(TGGATESsmall)
> TGGATESCells <- cellNames(TGGATESsmall)
> tSet <- subsetTo(TGGATESsmall,drugs = TGGATESDrugNames[1],
+   cells = TGGATESCells[1], duration = "2")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("subsetTo", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summarizeMolecularProfiles")
> ### * summarizeMolecularProfiles
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summarizeMolecularProfiles
> ### Title: Takes molecular data from a ToxicoSet, and summarises them into
> ###   one entry per drug and experimental condition.
> ### Aliases: summarizeMolecularProfiles
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> summMP <- ToxicoGx::summarizeMolecularProfiles(
+   tSet = TGGATESsmall, mDataType = "rna",
+   cell.lines=cellNames(TGGATESsmall), drugs = head(drugNames(TGGATESsmall)),
+   features = fNames(TGGATESsmall,"rna"), duration = "8",
+   dose = c("Control", "High"), summary.stat = "median",
+   fill.missing = TRUE, verbose=TRUE
+   )
[1] "Control;8"
[1] "High;8"
[1] "Control;8"
[1] "High;8"
[1] "Control;8"
[1] "High;8"
[1] "Control;8"
[1] "High;8"
[1] "Control;8"
[1] "High;8"
[1] "Control;8"
[1] "High;8"
[1] "Control"
[1] "8"
[1] "High"
[1] "8"
> 
> #subset into expression matrix for a requested drug
> assays <- SummarizedExperiment::assays(summMP)[[drugNames(TGGATESsmall)[1]]]
> #summarization of phenoData for requested experiments
> phenoData <- SummarizedExperiment::colData(summMP)
> #summarization of phenoData for requested experiments
> featureData <- SummarizedExperiment::rowData(summMP) #featureData for requested experiments
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summarizeMolecularProfiles", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summarizeSensitivityProfiles")
> ### * summarizeSensitivityProfiles
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summarizeSensitivityProfiles
> ### Title: Takes the sensitivity data from a ToxicoSet, and summarises them
> ###   into a drug vs cell line table
> ### Aliases: summarizeSensitivityProfiles
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> TGGATESauc <- summarizeSensitivityProfiles(TGGATESsmall, sensitivity.measure='auc_recomputed')
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summarizeSensitivityProfiles", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("updateCellId")
> ### * updateCellId
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: updateCellId
> ### Title: A function to update cell ids
> ### Aliases: updateCellId
> ### Keywords: internal
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> updateCellId(TGGATESsmall, new.ids = cellNames(TGGATESsmall))
Name:  TGGATES Human LDH 
Date Created:  Wed Sep 25 15:28:35 2019 
Number of cell lines:  1 
Number of drugs:  6 
RNA: 
	Dim:  20056 136 
Drug pertubation: 
	Please look at pertNumber(tSet) to determine number of experiments for each drug-cell combination.
Drug sensitivity: 
	Number of Experiments:  34 
	Please look at sensNumber(tSet) to determine number of experiments for each drug-cell combination.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("updateCellId", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("updateDrugId")
> ### * updateDrugId
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: updateDrugId
> ### Title: A function to update drug ids
> ### Aliases: updateDrugId
> ### Keywords: internal
> 
> ### ** Examples
> 
> data(TGGATESsmall)
> updateDrugId(TGGATESsmall, new.ids = drugNames(TGGATESsmall))
Name:  TGGATES Human LDH 
Date Created:  Wed Sep 25 15:28:35 2019 
Number of cell lines:  1 
Number of drugs:  6 
RNA: 
	Dim:  20056 136 
Drug pertubation: 
	Please look at pertNumber(tSet) to determine number of experiments for each drug-cell combination.
Drug sensitivity: 
	Number of Experiments:  34 
	Please look at sensNumber(tSet) to determine number of experiments for each drug-cell combination.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("updateDrugId", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  27.176 2.876 30.252 0.004 0.021 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
